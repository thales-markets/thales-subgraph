type SportMarket @entity {
  id: ID!
  timestamp: BigInt!
  address: Bytes!
  gameId: Bytes!
  maturityDate: BigInt!
  tags: [BigInt!]
  isOpen: Boolean!
  isResolved: Boolean!
  isCanceled: Boolean!
  finalResult: BigInt!
  poolSize: BigInt!
  numberOfParticipants: BigInt!
  homeTeam: String!
  awayTeam: String!
  homeOdds: BigInt!
  awayOdds: BigInt!
  drawOdds: BigInt!
  homeScore: BigInt
  awayScore: BigInt
  upAddress: Bytes!
  downAddress: Bytes!
  drawAddress: Bytes!
  isApex: Boolean
  resultDetails: String
  isPaused: Boolean!
  leagueRaceName: String
  qualifyingStartTime: BigInt
  arePostQualifyingOddsFetched: Boolean
  betType: BigInt
  parentMarket: Bytes
  spread: BigInt
  total: BigInt
  doubleChanceMarketType: String
  playerId: Bytes
  playerName: String
  playerPropsLine: BigInt
  playerPropsType: BigInt
  playerPropsOutcome: BigInt
  playerPropsScore: BigInt
}

type GameIdToParentMarket @entity {
  id: ID!
  parentMarket: Bytes!
}

type ParentMarketToDoubleChanceMarket @entity {
  id: ID!
  homeTeamNotToLoseMarket: Bytes!
  awayTeamNotToLoseMarket: Bytes!
  noDrawMarket: Bytes!
}

enum MarketTransactionType {
  buy
  sell
}

type ClaimTx @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  account: Bytes!
  amount: BigInt!
  market: SportMarket!
  caller: Bytes!
}

type MarketTransaction @entity {
  id: ID!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  type: MarketTransactionType!
  account: Bytes!
  market: Bytes!
  amount: BigInt!
  paid: BigInt!
  position: BigInt!
  wholeMarket: SportMarket!
  positionBalance: PositionBalance!
}

enum PositionType {
  home
  away
  draw
}

type Position @entity {
  id: ID!
  market: SportMarket!
  side: PositionType!
  claimable: Boolean!
}

type PositionBalance @entity {
  id: ID!
  firstTxHash: Bytes!
  account: Bytes!
  amount: BigInt!
  position: Position!
  sUSDPaid: BigInt!
  timestamp: BigInt!
  claimed: Boolean!
}

type OvertimeVoucher @entity {
  id: ID!
  address: Bytes!
}

type BuyTransaction @entity {
  id: ID!
  marketTransactionId: String!
  positionBalanceId: String!
}

type Race @entity {
  id: ID!
  raceName: String!
  startTime: BigInt!
  qualifyingStartTime: BigInt!
}

type ParlayMarket @entity {
  id: ID!
  txHash: Bytes!
  sportMarkets: [SportMarket!]!
  sportMarketsFromContract: [Bytes!]!
  positions: [Position!]!
  positionsFromContract: [BigInt!]!
  marketQuotes: [BigInt!]
  account: Bytes!
  totalAmount: BigInt!
  sUSDAfterFees: BigInt
  sUSDPaid: BigInt
  totalQuote: BigInt
  skewImpact: BigInt
  timestamp: BigInt!
  lastGameStarts: BigInt!
  blockNumber: BigInt!
  claimed: Boolean!
  won: Boolean!
}

type User @entity {
  id: ID!
  volume: BigInt!
  pnl: BigInt!
  trades: Int
}

type Vault @entity {
  id: ID!
  address: Bytes!
  round: BigInt!
}

type VaultTransaction @entity {
  id: ID!
  vault: Bytes!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  market: Bytes!
  amount: BigInt!
  paid: BigInt!
  position: BigInt!
  wholeMarket: SportMarket!
  round: BigInt!
}

type ParlayVaultTransaction @entity {
  id: ID!
  vault: Bytes!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  market: Bytes!
  paid: BigInt!
  wholeMarket: ParlayMarket!
  round: BigInt!
}

type VaultPnl @entity {
  id: ID!
  vault: Bytes!
  timestamp: BigInt!
  round: BigInt!
  pnl: BigInt!
}

enum VaultUserTransactionType {
  deposit
  withdrawalRequest
  claim
}

type VaultUserTransaction @entity {
  id: ID!
  vault: Bytes!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  account: Bytes!
  type: VaultUserTransactionType!
  amount: BigInt
  round: BigInt!
}

type Zebro @entity {
  id: ID!
  owner: Bytes!
  tokenId: BigInt!
  country: BigInt!
  countryName: String!
  url: String!
}

enum AmmType {
  single
  parlay
}

type Referrer @entity {
  id: ID!
  trades: BigInt!
  totalVolume: BigInt!
  totalEarned: BigInt!
  timestamp: BigInt!
}

type ReferredTrader @entity {
  id: ID!
  trades: BigInt!
  totalVolume: BigInt!
  totalAmount: BigInt!
  referrer: Referrer!
  timestamp: BigInt!
}

type ReferralTransaction @entity {
  id: ID!
  referrer: Referrer!
  trader: ReferredTrader!
  amount: BigInt!
  volume: BigInt!
  ammType: AmmType!
  timestamp: BigInt!
}

enum LiquidityPoolType {
  single
  parlay
}

type LiquidityPool @entity {
  id: ID!
  address: Bytes!
  round: BigInt!
  liquidityPoolType: LiquidityPoolType!
}

type LiquidityPoolPnl @entity {
  id: ID!
  liquidityPool: Bytes!
  timestamp: BigInt!
  round: BigInt!
  pnl: BigInt!
  liquidityPoolType: LiquidityPoolType!
}

enum LiquidityPoolUserTransactionType {
  deposit
  withdrawalRequest
  claim
}

type LiquidityPoolUserTransaction @entity {
  id: ID!
  liquidityPool: Bytes!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  account: Bytes!
  type: LiquidityPoolUserTransactionType!
  amount: BigInt
  round: BigInt!
  liquidityPoolType: LiquidityPoolType!
}
