type Market @entity {
  id: ID!
  gameId: Bytes!
  sportId: BigInt!
  typeId: BigInt!
  maturity: BigInt!
  status: BigInt!
  line: BigInt!
  playerId: BigInt!
  position: BigInt!
  odd: BigInt!
}

type Ticket @entity {
  id: ID!
  txHash: Bytes!
  timestamp: BigInt!
  markets: [Market!]!
  lastGameStarts: BigInt!
  owner: Bytes!
  buyInAmount: BigInt!
  payout: BigInt!
  isLive: Boolean!
  totalQuote: BigInt
  fees: BigInt
  collateral: Bytes
}

type LiquidityPool @entity {
  id: ID!
  address: Bytes!
  round: BigInt!
}

type LiquidityPoolPnl @entity {
  id: ID!
  liquidityPool: Bytes!
  timestamp: BigInt!
  round: BigInt!
  pnl: BigInt!
}

enum LiquidityPoolUserTransactionType {
  deposit
  withdrawalRequest
  claim
}

type LiquidityPoolUserTransaction @entity {
  id: ID!
  liquidityPool: Bytes!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  account: Bytes!
  type: LiquidityPoolUserTransactionType!
  amount: BigInt
  round: BigInt!
}

type BlockedGame @entity {
  id: ID!
  timestamp: BigInt!
  hash: Bytes!
  gameId: Bytes!
  reason: String!
  isUnblocked: Boolean!
  unblockedBy: Bytes
}
